<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="io.renren.modules.zd.dao.ZdBalanceDao" >
  <resultMap id="BaseResultMap" type="io.renren.modules.zd.entity.ZdBalanceEntity" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue May 08 23:31:42 CST 2018.
    -->
    <result column="id_" property="id" />
    <result column="balance_No" property="balanceNo" jdbcType="VARCHAR" />
    <result column="high_level_org" property="highLevelOrg" jdbcType="VARCHAR" />
    <result column="low_level_org" property="lowLevelOrg" jdbcType="VARCHAR" />
    <result column="semester_code" property="semesterCode" jdbcType="CHAR" />
    <result column="discount_rate" property="discountRate" jdbcType="INTEGER" />
    <result column="publish_price_total" property="publishPriceTotal" jdbcType="DECIMAL" />
    <result column="refund_price_total" property="refundPriceTotal" jdbcType="DECIMAL" />
    <result column="refund_Price_Shiyang" property="refundPriceShiyang" jdbcType="DECIMAL" />
    <result column="publish_Price_Shiyang" property="publishPriceShiyang" jdbcType="DECIMAL" />
    <result column="price_total" property="priceTotal" jdbcType="DECIMAL" />
    <result column="actual_total" property="actualTotal" jdbcType="DECIMAL" />
    <result column="balance_status" property="balanceStatus" jdbcType="INTEGER" />
    <result column="audit_status" property="auditStatus" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
      <result column="create_by" property="createBy" jdbcType="VARCHAR" />
      <result column="update_By" property="updateBy" jdbcType="VARCHAR" />
      <result column="remark" property="remark" jdbcType="VARCHAR" />
  </resultMap>

  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue May 08 23:31:42 CST 2018.
    -->
    id_, balance_id, high_level_org, low_level_org, semester_code, discount_rate, publish_price_total,
    refund_price_total, price_total, actual_total, balance_status, audit_status, create_time, 
    update_time
  </sql>
 <!-- 根据省级单位组织id查询属于该单位的结算单 -->
  <select id="queryZdBalanceByHighLevelOrg" resultMap="BaseResultMap">
 	select * from zd_balance where high_level_org = #{params.highLevelOrg}
 	<if test = "params.lowLevelOrg!=null and params.lowLevelOrg!=''">
 		and low_level_org = #{params.lowLevelOrg}
 	</if>
 	<if test = "params.semesterCode!=null and params.semesterCode!=''">
 		and semester_code = #{params.semesterCode}
 	</if>
 	<if test = "params.startTime!=null and params.startTime!='' and params.endTime!=null and params.endTime!=''">
 		and create_time &gt;= #{params.startTime} and create_time &lt;= #{params.endTime} 
 	</if>
 	<if test = "params.balanceId!=null and params.balanceId!=''">
 		and balance_id like '%${params.balanceId}%'
 	</if>
 	order by create_time DESC
 </select>	
 
 
 <!-- 根据县级单位组织id查询属于该单位的结算单 -->
  <select id="queryZdBalanceByLowLevelOrg" resultMap="BaseResultMap">
 	select * from zd_balance where low_level_org = #{params.lowLevelOrg}
 	and audit_status=1
 	<if test = "params.semesterCode!=null and params.semesterCode!=''">
 		and semester_code = #{params.semesterCode}
 	</if>
 	<if test = "params.startTime!=null and params.startTime!='' and params.endTime!=null and params.endTime!=''">
 		and create_time &gt;= #{params.startTime} and create_time &lt;= #{params.endTime} 
 	</if>
 	<if test = "params.balanceId!=null and params.balanceId!=''">
 		and balance_id like '%${params.balanceId}%'
 	</if>
 	order by create_time DESC
 </select>


  
  <update id="updaeAuditStatus">
       update zd_balance set audit_status = '1' where id_ = #{params.balanceId}
  </update>
  
    <update id="upBalanceStatus">
       update zd_balance set balance_status = '1' where id_ = #{params.balanceId}
  </update>

    <resultMap id="zdBalanceVOMap" type="io.renren.modules.zd.vo.ZdBalanceVO">
        <result column="total_publish" property="totalPublish"/>
        <result column="total_refund" property="totalRefund"/>
        <result column="total_pay" property="totalPay"/>
        <result column="mayang" property="mayang"/>
        <result column="shiyang" property="shiyang"/>
        <result column="semesterCodeName" property="semesterCodeName"/>
        <result column="needPay" property="needPay"/>
        <result column="low_Level_Org_Name" property="lowLevelOrgName"/>
        <result column="high_Level_Org_Name" property="highLevelOrgName"/>
    </resultMap>

  <select id="queryZdBalanceList" resultMap="zdBalanceVOMap">

      SELECT b.*,p.total_publish,
      r.total_refund,
      SUM(bp.sum)total_pay,
      b.price_total mayang,
      b.actual_total shiyang,
      (b.actual_total-ifnull(SUM(bp.sum),0))needPay,
      (SELECT o.org_name FROM sys_org o WHERE o.org_code=b.low_Level_Org)low_Level_Org_Name
      ,(SELECT o.org_name FROM sys_org o WHERE o.org_code=b.high_Level_Org)high_Level_Org_Name
      ,(select s.name from sys_semester s where s.semester_code=b.semester_code)semesterCodeName
      FROM zd_balance b LEFT JOIN
      (
      SELECT bp.*,SUM(pr.`publish_num`*pr.`publish_price`)total_publish FROM zd_balance_publish bp
      LEFT JOIN zd_publish p ON bp.`publish_id`=p.`id_`
      LEFT JOIN zd_publish_resource pr ON pr.`publish_id`=p.`id_`
      GROUP BY bp.`balance_id`
      ) p ON b.id_=p.balance_id

      LEFT JOIN
      (
      SELECT br.*,SUM(zrr.`real_num`*zrr.`refund_price`)total_refund FROM zd_balance_refund br
      LEFT JOIN zd_refund  zr ON br.`refund_id`=zr.id_
      LEFT JOIN zd_refund_resource zrr ON zr.id_=zrr.`refund_id`
      GROUP BY br.`balance_id`
      ) r ON b.id_=r.balance_id
      LEFT JOIN zd_balance_pay bp ON bp.balance_id=b.id_
      WHERE 1=1
      <if test="params.highLevelOrg!=null and params.highLevelOrg!=''">
        and b.high_Level_Org=#{params.highLevelOrg}
    </if>
      <if test="params.lowLevelOrg!=null and params.lowLevelOrg!=''">
          and b.low_level_org=#{params.lowLevelOrg}
      </if>
      <if test="params.highLevelOrg!=null and params.highLevelOrg!=''">
          and b.high_Level_Org=#{params.highLevelOrg}
      </if>
      <if test="params.semesterCode!=null and params.semesterCode!=''">
          and b.semester_code=#{params.semesterCode}
      </if>
      <if test="params.balanceNo!=null and params.balanceNo!=''">
          and b.balance_no like concat('%',#{params.balanceNo},'%')
      </if>
      <if test="params.createTime!=null and params.createTime!=''">
          and b.create_time>=#{params.createTime}
      </if>
      <if test="params.endTime!=null and params.endTime!=''">
          <![CDATA[ and b.create_time<=#{params.endTime}	]]>
      </if>
      GROUP BY b.id_
      order by b.create_time desc
  </select>
    <resultMap id="zdBalanceRefundVOMap" type="io.renren.modules.zd.vo.ZdBalanceRefundVO">
        <result property="refundCode" column="refund_Code"/>
        <result property="logisticNo" column="logistic_no"/>
        <result property="createTime" column="create_time"/>
        <result property="totalResourceNum" column="total_resource_num"/>
        <result property="totalRefund" column="total_refund"/>
        <result property="realname" column="realname"/>
        <result property="fromOrgName" column="from_org_name"/>
        <result property="semesterName" column="semester_name"/>
        <result property="shiyang" column="shiyang"/>
        <result property="mayang" column="mayang"/>
    </resultMap>

    <select id="listRefundByBalanceId" resultMap="zdBalanceRefundVOMap">

	SELECT zr.`refund_code`,zr.`logistic_no`,zr.`create_time`,
	SUM(zrr.`real_num`)total_resource_num,
	SUM(zrr.`real_num`*zrr.`refund_price`)total_refund,
	SUM(zrr.mayang)mayang,
	SUM(zrr.shiyang)shiyang,
	(SELECT u.realname FROM sys_user u WHERE u.user_id=zr.`create_by` )realname,
      (SELECT o.org_name FROM sys_org o WHERE o.org_code=zr.`from_org_code`)from_org_name,
      (SELECT s.name FROM sys_semester s WHERE s.semester_code=zr.`semester_code`)semester_name

       FROM zd_balance_refund r
      LEFT JOIN zd_refund zr ON r.`refund_id`=zr.`id_`
      LEFT JOIN zd_refund_resource zrr ON zrr.`refund_id`=r.`refund_id`
      where r.balance_Id=#{balanceId}
      GROUP BY r.`refund_id`

    </select>
    <resultMap id="zdBalancePublishVOMap" type="io.renren.modules.zd.vo.ZdBalancePublishVO">
        <result property="publishNo" column="publish_no"/>
        <result property="logisticNo" column="logistic_no"/>
        <result property="createTime" column="create_time"/>
        <result property="totalResourceNum" column="total_resource_num"/>
        <result property="totalPublish" column="total_Publish"/>
        <result property="realname" column="realname"/>
        <result property="fromOrgName" column="from_org_name"/>
        <result property="toOrgName" column="to_org_name"/>
        <result property="semesterName" column="semester_name"/>
        <result property="shiyang" column="shiyang"/>
        <result property="mayang" column="mayang"/>
    </resultMap>
    <select id="listPublishByBalanceId" resultMap="zdBalancePublishVOMap">


      SELECT p.create_time,p.logistic_no,p.publish_no,
      SUM(pr.publish_num)total_resource_num,
      SUM(pr.publish_num*pr.publish_price)total_publish,
      SUM(pr.mayng)mayang,
      SUM(pr.shiyang)shiyang,
      (SELECT u.realname FROM sys_user u WHERE u.user_id=p.`create_by` )realname,
      (SELECT o.org_name FROM sys_org o WHERE o.org_code=p.`to_org_code`)to_org_name,(SELECT s.name FROM sys_semester s WHERE s.semester_code=p.`semester_code`)semester_name
      FROM zd_balance_publish bp
      LEFT JOIN zd_publish p ON p.id_=bp.publish_id
      LEFT JOIN zd_publish_resource pr ON pr.publish_id=bp.publish_id
          where bp.balance_Id=#{balanceId}
      GROUP BY bp.publish_id

    </select>
    <select id="queryBalancePublish" resultMap="zdBalanceVOMap">
        SELECT b.*,
        sum(p.total_publish)total_publish,
        sum(r.total_refund)total_refund,
        SUM(bp.sum)total_pay,
        sum(b.price_total) mayang,
        sum(b.actual_total) shiyang,
        (sum(b.actual_total)-ifnull(SUM(bp.sum),0))needPay,
        (SELECT o.org_name FROM sys_org o WHERE o.org_code=b.low_Level_Org)low_Level_Org_Name
        ,(SELECT o.org_name FROM sys_org o WHERE o.org_code=b.high_Level_Org)high_Level_Org_Name
        ,(select s.name from sys_semester s where s.semester_code=b.semester_code)semesterCodeName
        FROM zd_balance b LEFT JOIN
        (
        SELECT bp.*,SUM(pr.`publish_num`*pr.`publish_price`)total_publish FROM zd_balance_publish bp
        LEFT JOIN zd_publish p ON bp.`publish_id`=p.`id_`
        LEFT JOIN zd_publish_resource pr ON pr.`publish_id`=p.`id_`
        GROUP BY bp.`balance_id`
        ) p ON b.id_=p.balance_id

        LEFT JOIN
        (
        SELECT br.*,SUM(zrr.`real_num`*zrr.`refund_price`)total_refund FROM zd_balance_refund br
        LEFT JOIN zd_refund  zr ON br.`refund_id`=zr.id_
        LEFT JOIN zd_refund_resource zrr ON zr.id_=zrr.`refund_id`
        GROUP BY br.`balance_id`
        ) r ON b.id_=r.balance_id
        LEFT JOIN zd_balance_pay bp ON bp.balance_id=b.id_
        WHERE 1=1
        and b.semester_code=#{semesterCode} and b.high_Level_Org=#{orgCode}
        GROUP BY b.semester_code,b.high_Level_Org,b.low_level_org
        order by b.create_time desc

    </select>
    <resultMap id="balanceOrgVOMap" type="io.renren.modules.zd.vo.BalanceOrgVO" extends="io.renren.modules.sys.dao.SysOrgDao.sysOrgMap">
        <result column="prepare_balance_count" property="prepareBalanceCount"/>
        <result column="prepare_refund_count" property="prepareRefundCount"/>
        <result column="prepare_publish_count" property="preparePublishCount"/>

    </resultMap>
    <select id="listBalanceOrg" resultMap="balanceOrgVOMap">

SELECT o.*,IFNULL(a.prepare_balance_count,0)prepare_balance_count,
IFNULL(b.prepare_publish_count,0)prepare_publish_count,IFNULL(c.prepare_refund_count,0)prepare_refund_count
FROM sys_org o
LEFT JOIN
(
SELECT SUM(IF(b.balance_status='0',1,0))prepare_balance_count,b.`low_level_org`
FROM zd_balance b
WHERE 1=1
<if test="params.semesterCode!=null and params.semesterCode!=''">
    and b.`semester_code`=#{params.semesterCode}
</if>

GROUP BY b.`low_level_org`
) a ON a.low_level_org=o.`org_code`
LEFT JOIN
(
SELECT SUM(IF(p.status='3',1,0))prepare_publish_count,p.to_org_code
FROM zd_publish p
WHERE 1=1
        <if test="params.semesterCode!=null and params.semesterCode!=''">
        and p.`semester_code`=#{params.semesterCode}
        </if>
 GROUP BY p.to_org_code
)b ON b.to_org_code=org_code
LEFT JOIN
(
SELECT SUM(IF(r.status='3',1,0))prepare_refund_count,r.`from_org_code`
FROM zd_refund r
WHERE 1=1
        <if test="params.semesterCode!=null and params.semesterCode!=''">
        and r.`semester_code`=#{params.semesterCode}
        </if>
GROUP BY r.`from_org_code`
)c ON c.from_org_code=o.`org_code`
WHERE o.parent_id=#{params.orgCode}
GROUP BY o.`org_code`

    </select>
    <select id="selectBalanceMergeList" resultType="io.renren.modules.zd.vo.BalanceExportVO">

           select a.semester_code,a.high_Level_Org,a.low_Level_Org,
           sum(total_publish) total_publish,sum(total_refund) total_refund,
           sum(total_pay) total_pay,
	 sum(mayang) mayang,sum(shiyang) shiyang,sum(needPay) needPay
,low_Level_Org_Name	,high_Level_Org_Name,semesterCodeName
	 from (SELECT b.semester_code,b.high_Level_Org,b.low_Level_Org,
	     ifnull(p.total_publish,0) total_publish,
      ifnull(r.total_refund,0) total_refund,
      ifnull(SUM(bp.sum),0) total_pay,
      ifnull(b.price_total,0)  mayang,
      ifnull(b.actual_total,0)  shiyang,
      (b.actual_total-ifnull(SUM(bp.sum),0)) needPay,
      (SELECT o.org_name FROM sys_org o WHERE o.org_code=b.low_Level_Org)low_Level_Org_Name
      ,(SELECT o.org_name FROM sys_org o WHERE o.org_code=b.high_Level_Org)high_Level_Org_Name
      ,(select s.name from sys_semester s where s.semester_code=b.semester_code)semesterCodeName
      FROM zd_balance b LEFT JOIN
      (
      SELECT bp.*,SUM(pr.`publish_num`*pr.`publish_price`)total_publish FROM zd_balance_publish bp
      LEFT JOIN zd_publish p ON bp.`publish_id`=p.`id_`
      LEFT JOIN zd_publish_resource pr ON pr.`publish_id`=p.`id_`
      GROUP BY bp.`balance_id`
      ) p ON b.id_=p.balance_id

      LEFT JOIN
      (
      SELECT br.*,SUM(zrr.`real_num`*zrr.`refund_price`)total_refund FROM zd_balance_refund br
      LEFT JOIN zd_refund  zr ON br.`refund_id`=zr.id_
      LEFT JOIN zd_refund_resource zrr ON zr.id_=zrr.`refund_id`
      GROUP BY br.`balance_id`
      ) r ON b.id_=r.balance_id
      LEFT JOIN zd_balance_pay bp ON bp.balance_id=b.id_
      WHERE 1=1
			  and b.high_Level_Org=#{params.orgCode}

				 and b.semester_code=#{params.semesterCode}

			GROUP BY b.id_
      order by b.create_time desc
			)a
			group by a.semester_code,a.high_Level_Org,a.low_Level_Org
    </select>


</mapper>