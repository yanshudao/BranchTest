<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>io.renren</groupId>
    <artifactId>zhengding</artifactId>
    <version>2.0.0</version>
    <packaging>jar</packaging>
    <description>renren-fast</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.10.RELEASE</version>
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <mybatisplus.spring.boot.version>1.0.5</mybatisplus.spring.boot.version>
        <mybatisplus.version>2.1.9</mybatisplus.version>
        <mysql.version>5.1.38</mysql.version>
        <druid.version>1.1.3</druid.version>
        <beetl.version>2.9.3</beetl.version>
        <quartz.version>2.3.0</quartz.version>
        <commons.lang.version>2.6</commons.lang.version>
        <commons.fileupload.version>1.3.1</commons.fileupload.version>
        <commons.io.version>2.5</commons.io.version>
        <commons.codec.version>1.10</commons.codec.version>
        <commons.configuration.version>1.10</commons.configuration.version>
        <shiro.version>1.3.2</shiro.version>
        <jwt.version>0.7.0</jwt.version>
        <kaptcha.version>0.0.9</kaptcha.version>
        <qiniu.version>[7.2.0, 7.2.99]</qiniu.version>
        <aliyun.oss.version>2.5.0</aliyun.oss.version>
        <qcloud.cos.version>4.4</qcloud.cos.version>
        <swagger.version>2.2.2</swagger.version>
        <joda.time.version>2.10.1</joda.time.version>
        <xstream.version>1.4.4</xstream.version>
        <fastjson.version>1.2.45</fastjson.version>
        <redisson.version>3.5.0</redisson.version>
        <!--wagon plugin 配置-->
        <service-path>/work/renren</service-path>
        <pack-name>${project.artifactId}-${project.version}.jar</pack-name>
        <remote-addr>123.56.223.79:22</remote-addr>
        <remote-username>root</remote-username>
        <remote-passwd>Lixiang@2017</remote-passwd>
    </properties>

    <dependencies>
        <dependency>
            <groupId>cn.afterturn</groupId>
            <artifactId>easypoi-spring-boot-starter</artifactId>
            <version>4.2.0</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-spring-boot-starter-jaxws</artifactId>
            <version>3.2.1</version>
        </dependency>
        <!-- 引入freeMarker的依赖包. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-freemarker</artifactId>
        </dependency>
        <!--<dependency>
            <groupId>com.ibeetl</groupId>
            <artifactId>beetl</artifactId>
            <version>${beetl.version}</version>
        </dependency>-->
        <dependency>
            <groupId>org.jsoup</groupId>
            <artifactId>jsoup</artifactId>
            <version>1.11.3</version>
        </dependency>
        <!--<dependency>-->
        <!--<groupId>org.springframework.boot</groupId>-->
        <!--<artifactId>spring-boot-devtools</artifactId>-->
        <!--<optional>true</optional>-->
        <!--</dependency>-->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatisplus-spring-boot-starter</artifactId>
            <version>${mybatisplus.spring.boot.version}</version>
        </dependency>
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus</artifactId>
            <version>${mybatisplus.version}</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.version}</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>${druid.version}</version>
        </dependency>
        <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz</artifactId>
            <version>${quartz.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>com.mchange</groupId>
                    <artifactId>c3p0</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>${commons.lang.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>${commons.fileupload.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${commons.io.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>${commons.codec.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-configuration</groupId>
            <artifactId>commons-configuration</artifactId>
            <version>${commons.configuration.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-core</artifactId>
            <version>${shiro.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-spring</artifactId>
            <version>${shiro.version}</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>${jwt.version}</version>
        </dependency>
        <dependency>
            <groupId>com.github.axet</groupId>
            <artifactId>kaptcha</artifactId>
            <version>${kaptcha.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${swagger.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${swagger.version}</version>
        </dependency>
        <dependency>
            <groupId>com.qiniu</groupId>
            <artifactId>qiniu-java-sdk</artifactId>
            <version>${qiniu.version}</version>
        </dependency>
        <dependency>
            <groupId>com.aliyun.oss</groupId>
            <artifactId>aliyun-sdk-oss</artifactId>
            <version>${aliyun.oss.version}</version>
        </dependency>
        <dependency>
            <groupId>com.qcloud</groupId>
            <artifactId>cos_api</artifactId>
            <version>${qcloud.cos.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>${joda.time.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thoughtworks.xstream</groupId>
            <artifactId>xstream</artifactId>
            <version>${xstream.version}</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${fastjson.version}</version>
        </dependency>
        <dependency>
            <groupId>org.redisson</groupId>
            <artifactId>redisson</artifactId>
            <version>${redisson.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.paho</groupId>
            <artifactId>org.eclipse.paho.client.mqttv3</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.8.2</version>
        </dependency>

    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <extensions>
            <extension>
                <groupId>org.apache.maven.wagon</groupId>
                <artifactId>wagon-ssh</artifactId>
                <version>2.8</version>
            </extension>
        </extensions>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <fork>true</fork>
                </configuration>
            </plugin>
            <!-- 跳过单元测试 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>wagon-maven-plugin</artifactId>
                <version>1.0</version>
                <configuration>
                    <fromFile>target/${pack-name}</fromFile>
                    <url><![CDATA[scp://${remote-username}:${remote-passwd}@${remote-addr}${service-path}]]></url>
                    <commands>
                        <!-- Kill Old Process -->
                        <command>pkill -f ${pack-name}</command>
                        <command>rm -f ${service-path}/renren.log</command>
                        <!-- Restart jar package，write result into renren.log -->
                        <command>
                            <![CDATA[nohup java -jar ${service-path}/${pack-name} --spring.profiles.active=test > ${service-path}/renren.log 2>&1 & ]]></command>
                        <command><![CDATA[netstat -nptl]]></command>
                        <command><![CDATA[ps -ef | grep java | grep -v grep]]></command>
                    </commands>
                    <!-- 运行命令 mvn clean package wagon:upload-single wagon:sshexec-->
                    <displayCommandOutputs>true</displayCommandOutputs>
                </configuration>
            </plugin>

            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.4.14</version>
                <!--<executions>-->
                <!--<execution>-->
                <!--<phase>package</phase>-->
                <!--<goals>-->
                <!--<goal>build</goal>-->
                <!--</goals>-->
                <!--</execution>-->
                <!--</executions>-->
                <configuration>
                    <imageName>renren/fast</imageName>
                    <dockerDirectory>${project.basedir}</dockerDirectory>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
                <!-- 运行命令 mvn clean package docker:build 打包并生成docker镜像 -->
            </plugin>
         <!--   <plugin>
                <groupId>com.github.wvengen</groupId>
                <artifactId>proguard-maven-plugin</artifactId>
                <version>2.0.11</version>
                <executions>
                    <execution>&lt;!&ndash; 混淆时刻，这里是打包的时候混淆&ndash;&gt;
                        <phase>package</phase>
                        <goals>&lt;!&ndash; 使用插件的什么功能，当然是混淆&ndash;&gt;
                            <goal>proguard</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                          &lt;!&ndash; 是否将生成的PG文件安装部署&ndash;&gt;
                    <attach>true</attach>
                          &lt;!&ndash; 是否混淆&ndash;&gt;
                    <obfuscate>true</obfuscate>
                          &lt;!&ndash; 指定生成文件分类 &ndash;&gt;
                    <attachArtifactClassifier>pg</attachArtifactClassifier>
                    <options>
                                 &lt;!&ndash; JDK目标版本1.8&ndash;&gt;
                        <option>-target 1.8</option>
                                 &lt;!&ndash; 不做收缩（删除注释、未被引用代码）&ndash;&gt;
                        <option>-dontshrink</option>
                                 &lt;!&ndash; 不做优化（变更代码实现逻辑）&ndash;&gt;
                        <option>-dontoptimize</option>
                                 &lt;!&ndash; 不路过非公用类文件及成员&ndash;&gt;
                        <option>-dontskipnonpubliclibraryclasses</option>
                        <option>-dontskipnonpubliclibraryclassmembers</option>
                                 &lt;!&ndash;不用大小写混合类名机制&ndash;&gt;
                        <option>-dontusemixedcaseclassnames</option>
                                 &lt;!&ndash; 优化时允许访问并修改有修饰符的类和类的成员 &ndash;&gt;
                        <option>-allowaccessmodification</option>
                                 &lt;!&ndash; 确定统一的混淆类的成员名称来增加混淆&ndash;&gt;
                        <option>-useuniqueclassmembernames</option>
                                 &lt;!&ndash; 不混淆所有包名&ndash;&gt;
                                 &lt;!&ndash;<option>-keeppackagenames</option>&ndash;&gt;
                                 &lt;!&ndash; 需要保持的属性：异常，注解等&ndash;&gt;
                        <option>-keepattributes
                            Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod
                        </option>
						<option>-keepclassmembers public class * {void set*(***);*** get*();}</option>
						&lt;!&ndash; 不混淆包下的所有类名，且类中的方法也不混淆&ndash;&gt;
						<option>-keep class io.renren.RenrenApplication {*; }</option>
                        <option>-keep class io.renren.common.** {*; }</option>
						<option>-keep class io.renren.config.** {*; }</option>
                        <option>-keep class io.renren.datasources.** {*; }</option>
                        <option>-keep class io.renren.modules.*.dao.** {*; }</option>
                        <option>-keep class io.renren.modules.*.controller.** {*; }</option>
                        <option>-keep class io.renren.modules.*.entity.** {*; }</option>
                        <option>-keep class io.renren.modules.*.vo.** {*; }</option>
                        <option>-keep class io.renren.modules.*.form.** {*; }</option>
                        <option>-keep class io.renren.modules.*.oauth2.** {*; }</option>
                        <option>-keep class io.renren.modules.*.redis.** {*;}</option>
                        <option>-keep class io.renren.modules.*.util.** {*; }</option>
                    </options>
                          &lt;!&ndash;class 混淆后输出的jar包&ndash;&gt;
                    <outjar>classes-autotest.jar</outjar>
                          &lt;!&ndash; 添加依赖，这里你可以按你的需要修改，这里测试只需要一个JRE的Runtime包就行了 &ndash;&gt;
                    <libs>
                        <lib>${java.home}/lib/rt.jar</lib>
                    </libs>
                          &lt;!&ndash; 对什么东西进行加载，这里仅有classes成功，毕竟你也不可能对配置文件及JSP混淆吧&ndash;&gt;
                    <injar>classes</injar>
                          &lt;!&ndash; 输出目录&ndash;&gt;
                    <outputDirectory>${project.build.directory}</outputDirectory>
                </configuration>
            </plugin>-->
		<!--	<plugin>
				<groupId>com.github.wvengen</groupId>
				<artifactId>proguard-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals><goal>proguard</goal></goals>
					</execution>
				</executions>
				<configuration>
					<proguardVersion>6.0.3</proguardVersion>
					<injar>${project.build.finalName}.jar</injar>
					&lt;!&ndash; <injar>classes</injar> &ndash;&gt;
					<outjar>${project.build.finalName}.jar</outjar>
					<obfuscate>true</obfuscate>
					<options>
                        <option>-ignorewarnings</option> &lt;!&ndash;忽略所有告警&ndash;&gt;
						&lt;!&ndash; 不做收缩（删除注释、未被引用代码）&ndash;&gt;
						<option>-dontshrink</option>
						&lt;!&ndash; 不做优化（变更代码实现逻辑）&ndash;&gt;
						<option>-dontoptimize</option>
						&lt;!&ndash; This option will replace all strings in reflections method invocations with new class names.
                             For example, invokes Class.forName('className')&ndash;&gt;
						&lt;!&ndash; <option>-adaptclassstrings</option> &ndash;&gt;
						&lt;!&ndash; This option will save all original annotations and etc. Otherwise all we be removed from files.&ndash;&gt;
						&lt;!&ndash; 不混淆所有特殊的类&ndash;&gt;
						<option>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,
							SourceFile,LineNumberTable,*Annotation*,EnclosingMethod</option>
						&lt;!&ndash; This option will save all original names in interfaces (without obfuscate).&ndash;&gt;
						<option>-keepnames interface **</option>
						&lt;!&ndash; This option will save all original methods parameters in files defined in -keep sections,
                             otherwise all parameter names will be obfuscate.&ndash;&gt;
						<option>-keepparameternames</option>
						&lt;!&ndash; <option>-libraryjars **</option> &ndash;&gt;
						&lt;!&ndash; This option will save all original class files (without obfuscate) but obfuscate all in domain package.&ndash;&gt;
						&lt;!&ndash;<option>-keep class !com.slm.proguard.example.spring.boot.domain.** { *; }</option>&ndash;&gt;
						<option>-keep class io.renren.RenrenApplication {*; }</option>
						<option>-keep class io.renren.common.** {*; }</option>
						<option>-keep class io.renren.config.** {*; }</option>
						<option>-keep class io.renren.datasources.** {*; }</option>
						<option>-keep class io.renren.modules.app.** {*; }</option>
						<option>-keep class io.renren.modules.*.dao.** {*; }</option>
						<option>-keep class io.renren.modules.*.controller.** {*; }</option>
						<option>-keep class io.renren.modules.*.entity.** {*; }</option>
						<option>-keep class io.renren.modules.*.vo.** {*; }</option>
						<option>-keep class io.renren.modules.*.form.** {*; }</option>
						<option>-keep class io.renren.modules.*.oauth2.** {*; }</option>
						<option>-keep class io.renren.modules.*.redis.** {*;}</option>
						<option>-keep class io.renren.modules.*.util.** {*; }</option>
						&lt;!&ndash; This option will save all original class files (without obfuscate) in service package&ndash;&gt;
						&lt;!&ndash;<option>-keep class com.slm.proguard.example.spring.boot.service { *; }</option>&ndash;&gt;
						&lt;!&ndash; This option will save all original interfaces files (without obfuscate) in all packages.&ndash;&gt;
						<option>-keep interface * extends * { *; }</option>
						&lt;!&ndash; <option>-keep @org.springframework.stereotype.Service class *</option> &ndash;&gt;
						&lt;!&ndash; This option will save all original defined annotations in all class in all packages.&ndash;&gt;
						<option>-keepclassmembers class * {
							&lt;!&ndash; @org.springframework.beans.factory.annotation.Autowired *; &ndash;&gt;
							@org.springframework.beans.factory.annotation.Value *;
							}
						</option>
					</options>
					<libs>
						&lt;!&ndash; Include main JAVA library required.&ndash;&gt;
						<lib>${java.home}/lib/rt.jar</lib>
						&lt;!&ndash; <lib>${java.home}/lib/spring-boot-starter-web-1.4.1.RELEASE.jar</lib> &ndash;&gt;
					</libs>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>net.sf.proguard</groupId>
						<artifactId>proguard-base</artifactId>
						<version>6.0.3</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						&lt;!&ndash; <phase>none</phase> &ndash;&gt;
						<goals>
							<goal>repackage</goal>
						</goals>
						<configuration>
							<mainClass>io.renren.RenrenApplication</mainClass>
						</configuration>
					</execution>
				</executions>
			</plugin>-->
            <plugin>
                <dependencies>
                    <dependency>
                        <groupId>net.sf.proguard</groupId>
                        <artifactId>proguard-base</artifactId>
                        <!-- 2019年7月15日    jdk1.8  兼容性还可以 -->
                        <version>6.0.2</version>
                        <scope>runtime</scope>
                    </dependency>
                </dependencies>
                <groupId>com.github.wvengen</groupId>
                <artifactId>proguard-maven-plugin</artifactId>
                <!-- 2019年7月15日    jdk1.8  兼容性还可以 -->
                <version>2.0.14</version>
                <executions>
                    <execution>
                        <!-- 混淆时刻，这里是打包的时候混淆 -->
                        <phase>package</phase>
                        <goals>
                            <!-- 使用插件的什么功能，当然是混淆 -->
                            <goal>proguard</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- 是否将生成的PG文件安装部署 -->
                    <attach>true</attach>
                    <!-- 是否混淆 -->
                    <obfuscate>true</obfuscate>
                    <!-- 指定生成文件分类 -->
                    <attachArtifactClassifier>pg</attachArtifactClassifier>
                    <!-- ProGuard配置参数(可引用cfg配置文件) -->
                    <options>
                        <!-- JDK目标版本1.8-->
                        <option>-target 1.8</option>
                        <!-- 不做收缩（删除注释、未被引用代码） -->
                        <option>-dontshrink</option>
                        <!-- 不做优化（变更代码实现逻辑） -->
                        <option>-dontoptimize</option>
                        <!-- 不路过非公用类文件及成员 -->
                        <option>-dontskipnonpubliclibraryclasses</option>
                        <option>-dontskipnonpubliclibraryclassmembers</option>
                        <!--不用大小写混合类名机制-->
                        <option>-dontusemixedcaseclassnames</option>
                        <!-- 优化时允许访问并修改有修饰符的类和类的成员 -->
                        <option>-allowaccessmodification</option>
                        <!-- 确定统一的混淆类的成员名称来增加混淆 -->
                        <option>-useuniqueclassmembernames</option>
                        <!-- 不混淆所有包名，整体混淆会出现各种各样的问题   程序又不会把你该引用的地方引用好   会直接修改类名  参数名的   建议不去除  有这个标签的话     <option>-keep class !com.package.** { *; }</option> 加入这个标签的报包名程序才会修改 -->
                        <option>-keeppackagenames</option>
                        <option>-adaptclassstrings</option>
                        <!-- <option>-keepdirectories</option> -->
                        <!-- 不混淆所有特殊的类 -->
                        <option>-keepattributes
                            Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod</option>
                        <!-- This option will save all original methods parameters in files defined
                            in -keep sections, otherwise all parameter names will be obfuscate. -->
                        <option>-keepparameternames</option>
                        <option>-keepclassmembers class * {
                            @org.springframework.beans.factory.annotation.Autowired *;
                            @org.springframework.beans.factory.annotation.Value *;
                            }
                        </option>
                        <!-- 混淆这个包下的类     此处需要更改为自己需要混淆的包名-->
                        <option>-keep class !io.renren.modules.** { *; }</option>

                        <!-- 不混淆main方法   此处需要更改为自己的启动类路径 -->
                        <option>-keep class io.renren.PlatformApplication { *; }</option>

                        <!-- 不混淆所有的set/get方法，毕竟项目中使用的部分第三方框架（例如Shiro）会用到大量的set/get映射 -->
                        <option>-keepclassmembers public class * {void set*(***);*** get*();}</option>
                        <!-- 不混淆包中的所有类以及类的属性及方法，实体包，混淆了会导致ORM框架及前端无法识别 -->

                        <!-- 不对包类的类名进行混淆，但对类中的属性和方法混淆   -->
                        <!--<option>-keep class com.package.util.** </option>-->
                        <!-- <option>-keep class com.example.service.** </option>-->

                        <!-- 不混淆包下的所有类名，且类中的方法和属性也不混淆 楼主已经把它注掉了  因为没用到 -->
                        <option>-keep class io.renren.modules.job.** { *; }</option>
                        <option>-keep class io.renren.modules.*.dao.** { *; }</option>
                        <option>-keep class io.renren.modules.*.entity.** { *; }</option>
                        <option>-keep class io.renren.modules.*.vo.** { *; }</option>
                        <option>-keep class io.renren.modules.*.form.** { *; }</option>
                        <option>-keep class io.renren.modules.*.cxf.** { *; }</option>
                      <!--  <option>-keep class com.example.domain.** { *; }</option>
                        <option>-keep class com.example.dto.** { *; } </option>
                        <option>-keep class com.example.config.**{ *; }</option>
                        <option>-keep class com.example.dao.** { *; }</option>-->
                        <!-- 无视跳过警告  因为修改代码的过程程序检测到有些文件不能更改就会报警告导致失败   如果对自己写的代码比较有信心的话可以直接无视 -->
                        <option>-dontwarn **</option>
                    </options>
                    <!--class 混淆后输出的jar包 -->
                    <outjar>${project.build.finalName}-pg.jar</outjar>
                    <!-- 混淆时需要引用的java库，这些库的类不会做混淆 -->
                    <libs>
                        <lib>${java.home}/lib/rt.jar</lib>
                        <lib>${java.home}/lib/jce.jar</lib>
                    </libs>
                    <!-- 需要做混淆的jar或目录 -->
                    <injar>classes</injar>
                    <!-- 输出目录 -->
                    <outputDirectory>${project.build.directory}</outputDirectory>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <repositories>
        <repository>
            <id>public</id>
            <name>aliyun nexus</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>public</id>
            <name>aliyun nexus</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

</project>
